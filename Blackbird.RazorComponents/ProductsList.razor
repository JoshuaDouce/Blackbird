@using Blackbird.Application.Dtos;
@using Blackbird.RazorComponents.Interfaces;
@using Blackbird.RazorComponents.Buttons;
@using Blackbird.RazorComponents.Interfaces.Services;
@using MudBlazor
@inject IProductService ProductService
@inject IDialogService DialogService
@inject Blackbird.RazorComponents.Interfaces.States.IBasketState BasketState

<MudContainer>
    <MudGrid>
        @if (Products == null)
        {
            <MudProgressCircular />
        }
        else
        {
            @foreach (var product in Products)
            {
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <MudCard Elevation="5" Style="width: 100%; margin-bottom: 16px;">
                        <MudCardHeader>
                            <MudText Typo="Typo.h6">@product.Name</MudText>
                        </MudCardHeader>
                        <MudCardMedia Image="@($"{product.ImageUrl}")" />
                        <MudCardContent>
                            <MudText Typo="Typo.body1" Style="@($"color: {(product.Price < 10 ? "green" : "blue")};")">Price: @product.Price</MudText>
                            <MudText Typo="Typo.body2">@product.Description</MudText>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@(() => ShowDetails(product))" Class="mr-1 ml-1">Details</MudButton>
                            <AddToBasketButton Product="@product"/>
                            <RemoveFromBasketButton Product="@product"/>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        }
    </MudGrid>
</MudContainer>

@code {
    private List<ProductDto> Products { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Products = (await ProductService.GetAllProductsAsync()).ToList();
    }

    private void ShowDetails(ProductDto product)
    {
        var parameters = new DialogParameters { { "Product", product } };
        var dialog = DialogService.Show<ProductDetailsCard>(
            "Product Details",
            parameters,
            new DialogOptions {
                MaxWidth = MaxWidth.Medium,
                FullWidth=true, 
                CloseButton=true
            });
    }
}